# -*- coding: utf-8 -*-
"""saveNeighborhoods.py

Automatically generated by Colaboratory.

"""

!pip install --upgrade gtfs-realtime-bindings

from google.transit import gtfs_realtime_pb2
from google.colab import files
import requests
from zipfile import ZipFile
from io import BytesIO
import csv
import time

#to test GTFS files
def readFromPb():
  feed = gtfs_realtime_pb2.FeedMessage() #GTFS methods
  response = requests.get('https://romamobilita.it/sites/default/files/rome_rtgtfs_trip_updates_feed.pb')
  feed.ParseFromString(response.content)
  for entity in feed.entity:
    if entity.HasField('trip_update'):
      print (entity)

#to get neighborhoods from coordinates
def getNeighborhoodFromCoordinates():
  response = requests.get('https://romamobilita.it/sites/default/files/rome_static_gtfs.zip').content
  zipfile = ZipFile(BytesIO(response))

  url = "http://nominatim.openstreetmap.org/reverse" #free map service

  querystring = {"accept-language":"it","addressdetails":"1","zoom":"16","namedetails":"0","limit":"5","format":"json"}

#read stop.txt, calls the openstreetmap api obn every coordinate, and saves to csv
  with zipfile.open('stops.txt', 'r') as myfile:
      content = myfile.readlines()
      with open('quartieri.csv', 'w+',  newline = '\n') as csvFile:
          csvWriter = csv.writer(csvFile, delimiter = ',')
          count = 0
          for elem in content:
              if(count >= 0 and count < 10000): #if-else to limit computation to a certain number of elements because of cap
                  elemList=elem.decode().split(sep=',')
                  elemList[2] = elemList[2].replace('"','')
                  querystring.update({"lon":elemList[5],"lat":elemList[4]})
                  response = requests.request("GET", url, params=querystring)
                  data = response.json()
                  if(data):
                      indirizzoCompleto = data.get("address")
                  if(indirizzoCompleto):
                      quartiere = indirizzoCompleto.get("suburb")
                      neigh = indirizzoCompleto.get("neighbourhood")
                      #some coordinates have suburb, some don't
                      if(quartiere):
                        csvWriter.writerow([count,elemList[0],elemList[1],elemList[2],elemList[4],elemList[5],quartiere])
                      elif(neighborhood):
                        csvWriter.writerow([count,elemList[0],elemList[1],elemList[2],elemList[4],elemList[5],neigh])
                      else:
                        csvWriter.writerow([count,elemList[0],elemList[1],elemList[2],elemList[4],elemList[5],'Non trovato'])
                  count+=1
                  print(count)
                  print(quartiere)
                  time.sleep(1) # capped to one second between one call and another
              elif(count < 0):
                  count+=1  
              else:
                  print("fatto")
                  break
      files.download('quartieri.csv')